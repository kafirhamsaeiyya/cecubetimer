; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name: CUBE
;    4	 * Author: De2290 aka kafirhamsaeiyya
;    5	 * License: GNU GPLv3
;    6	 * Description: A simple cube timer for the TI84 Plus CE
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	/* Standard headers (recommended) */
;   17	#include <math.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	#include <graphx.h>
;   22	#include "gfx/logo_gfx.h"
;   23	#define FONT_HEIGHT 8
;   24	/* Put your function prototypes here */
;   25	void dispSprite_Centered(gfx_sprite_t *sprite);
;   26	void print_Time(float elasped);
;   27	void print_TextCentered(char *text);
;   28	/* Put all your globals here */
;   29	
;   30	void main(void) {
_main:
	LD	HL,-28
	CALL	__frameset
;   31		char *cubewelcome = "Cube Timer";
	LD	BC,L__0
	LD	(IX+-6),BC
;   32		real_t cubeFinish_time;
;   33		list_t *times_List;
;   34		gfx_Begin();
	CALL	_gfx_Begin
;   35		gfx_SetPalette(logo_gfx_pal, sizeof_logo_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,_logo_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   36		gfx_SetTextFGColor(255);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   37		gfx_FillScreen(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   38		gfx_SetTextTransparentColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextTransparentColor
	POP	BC
;   39		gfx_SetTextBGColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   40		print_TextCentered(cubewelcome);
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_print_TextCentered
	POP	BC
;   41		dispSprite_Centered(rubikcube);
	LD	BC,_rubikcube_data
	PUSH	BC
	CALL	_dispSprite_Centered
	POP	BC
;   42		print_Time(0.0f);
	LD	C,0
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_print_Time
	POP	BC
	POP	BC
;   43		timer_Control = TIMER1_DISABLE;
	LD	HL,15859760
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   44		timer_1_Counter = 0;
	LD	BC,0
	LD	(15859712),BC
	XOR	A,A
	LD	(15859715),A
;   45		while (!os_GetCSC());
L_1:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_1
;   46		timer_Control = TIMER1_ENABLE | TIMER1_32K | TIMER1_UP;	
	LD	HL,15859760
	LD	(HL),3
	INC	HL
	LD	(HL),2
;   47		do {
L_3:
;   48			float elapsed = (float)atomic_load_increasing_32(&timer_1_Counter) / 32768;
	LD	BC,15859712
	PUSH	BC
	CALL	_atomic_load_increasing_32
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ultof
	OR	A,A
	SBC	HL,HL
	LD	E,71
	CALL	__fdiv
	LD	(IX+-10),BC
	LD	(IX+-7),A
;   49			print_Time(elapsed);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	CALL	_print_Time
	POP	BC
	POP	BC
;   50		       	cubeFinish_time = os_FloatToReal(elapsed);
	LD	C,(IX+-7)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	PEA	IX+-28
	CALL	_os_FloatToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-19
	LD	BC,9
	LDIR	
;   51	
;   52		} while (!os_GetCSC());
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_3
;   53		times_List = ti_MallocList(5);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_ti_AllocList
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;   54		times_List->items[0] = cubeFinish_time;
	LD	IY,(IX+-3)
	LEA	DE,IY+2
	LEA	HL,IX+-19
	LD	BC,9
	LDIR	
;   55		ti_SetVar(TI_REAL_LIST_TYPE, ti_L1, times_List);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,L__3
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_ti_SetVar
	POP	BC
	POP	BC
	POP	BC
;   56		free(times_List);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_free
	POP	BC
;   57		while (!os_GetCSC());	
L_7:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_7
;   58		gfx_End();
	CALL	_gfx_End
;   59	
;   60	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_free                               IMPORT  -----   function
;_ti_SetVar                          IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_ti_AllocList                       IMPORT  -----   function
;_os_FloatToReal                     IMPORT  -----   function
;_atomic_load_increasing_32          IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_print_Time                         IMPORT  -----   function
;_rubikcube_data                     IMPORT   3602   variable
;_dispSprite_Centered                IMPORT  -----   function
;_print_TextCentered                 IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextTransparentColor        IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_logo_gfx_pal                       IMPORT    512   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;cubeFinish_time                      IX-19      9   variable
;elapsed                              IX-10      4   variable
;cubewelcome                           IX-6      3   variable
;times_List                            IX-3      3   variable


; Stack Frame Size: 34 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__0:
	DB	"Cube Timer"
	DB	0
L__3:
	DB	"]"
	DB	0,0,0
	SEGMENT CODE
;   61	
;   62	/* Put other functions here */
;   63	void dispSprite_Centered(gfx_sprite_t *sprite) {
_dispSprite_Centered:
	CALL	__frameset0
;   64		gfx_Sprite(sprite, (LCD_WIDTH - 60) / 2, (LCD_HEIGHT - 60) / 2);
	LD	BC,90
	PUSH	BC
	LD	BC,130
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;   65	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _dispSprite_Centered ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Sprite                         IMPORT  -----   function
;sprite                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   66	
;   67	void print_Time(float elapsed) {
_print_Time:
	LD	HL,-32
	CALL	__frameset
;   68		real_t elapsed_real;
;   69		char str[10];
;   70		elapsed_real = os_FloatToReal(elapsed <= 0.001f ? 0.0f : elapsed);
	LD	HL,8589935
	LD	E,58
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	M,L_13
	LD	BC,0
	LD	(IX+-4),BC
	XOR	A,A
	LD	(IX+-1),A
	JR	L_14
L_13:
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(IX+-4),BC
	LD	(IX+-1),A
L_14:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	PEA	IX+-32
	CALL	_os_FloatToReal
	POP	BC
	POP	BC
	POP	BC
	LEA	DE,IX+-13
;   71		os_RealToStr(str, &elapsed_real, 8, 1, 2);
	LD	BC,2
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,8
	PUSH	BC
	PEA	IX+-13
	PEA	IX+-23
	LD	BC,9
	LDIR	
	CALL	_os_RealToStr
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   72		gfx_PrintStringXY(str, (LCD_WIDTH - gfx_GetStringWidth(str)) / 2, (LCD_HEIGHT - FONT_HEIGHT) / 2+60);
	LD	BC,176
	PUSH	BC
	PEA	IX+-23
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	PEA	IX+-23
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   73	
;   74	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _print_Time ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_os_RealToStr                       IMPORT  -----   function
;_os_FloatToReal                     IMPORT  -----   function
;str                                  IX-23     10   variable
;elapsed_real                         IX-13      9   variable
;temp11                                IX-4      4   variable
;elapsed                               IX+6      4   parameter


; Stack Frame Size: 44 (bytes)
;       Spill Code: 0 (instruction)


;   75	
;   76	void print_TextCentered(char *text) {
_print_TextCentered:
	CALL	__frameset0
;   77		gfx_PrintStringXY(text, (LCD_WIDTH - gfx_GetStringWidth(text)) / 2, (LCD_HEIGHT - FONT_HEIGHT) / 2-60);
	LD	BC,56
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   78	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _print_TextCentered ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;text                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	XREF _logo_gfx_pal:ROM
	XREF _rubikcube_data:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextTransparentColor:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _ti_AllocList:ROM
	XREF _ti_SetVar:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _os_GetCSC:ROM
	XREF _os_RealToStr:ROM
	XREF _os_FloatToReal:ROM
	XREF _atomic_load_increasing_32:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ultof:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __ishru_b:ROM
	XDEF _print_TextCentered
	XDEF _print_Time
	XDEF _dispSprite_Centered
	XDEF _main
	END
